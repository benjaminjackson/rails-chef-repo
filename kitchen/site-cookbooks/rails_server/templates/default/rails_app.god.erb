#
# Generated by Chef for <%= node[:hostname] %>
#

rails_root = "<%= node[:app_config][:app_path] %>"
rails_env = "<%= node[:app_config][:environment] %>"
bundle_command = "/home/<%= node[:app_config][:username] %>/.rbenv/shims/bundle"
rake_command = "/home/<%= node[:app_config][:username] %>/.rbenv/shims/rake"

pid_dir = "#{rails_root}/tmp/pids"
resque_workers = `cat #{rails_root}/.resque_workers`.chomp.to_i
resque_workers = 5 unless resque_workers > 0

# Notification e-mail configuration.
# Check out the godrb website for more notification options.
God::Contacts::Email.defaults do |d|
  d.from_email = "god@longform.org"
  d.from_name = "God"
  d.delivery_method = :sendmail
end

# You can define several people to notify.
# Each transition can be configured to send a notification
# to one person (name) or an entire group (group).
God.contact :email do |c|
  c.name = "Longform Developers"
  c.group = "developers"
  c.to_email = "dev@longform.org"
end

def setup_watch w
  # Clean stale PID files before starting.
  w.behavior :clean_pid_file

  w.start_grace = 60.seconds
  w.restart_grace = 60.seconds
  
  w.uid = '<%= node[:app_config][:username] %>'
  w.gid = '<%= node[:app_config][:username] %>'
  
  # restart if memory gets too high
  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 350.megabytes
      c.times = 2
    end
  end

  # determine the state on startup
  w.transition(:init, { true => :up, false => :start }) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
      c.interval = 5.seconds
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
    end
  end
end

# Resque
resque_workers.times do |num|
  God.watch do |w|
    w.dir      = "#{rails_root}"
    w.name     = "resque-#{num}"
    w.group    = 'resque'
    w.interval = 10.seconds
    w.pid_file = "#{pid_dir}/resque_work_#{num}.pid"
    w.env      = {"QUEUE"=>"*", "RAILS_ENV"=>rails_env,  'PIDFILE' => w.pid_file }
    w.start    = "cd #{rails_root} && #{bundle_command} exec #{rake_command} -f #{rails_root}/Rakefile environment resque:work &"
    w.log      = "#{rails_root}/log/resque.log"
    setup_watch w
  end
end

# Resque scheduler
God.watch do |w|
  w.dir      = "#{rails_root}"
  w.name     = "resque-scheduler"
  w.group    = 'resque'
  w.interval = 5.seconds
  w.pid_file = "#{pid_dir}/resque_scheduler.pid"
  w.env      = {"RAILS_ENV"=>rails_env, 'PIDFILE' => w.pid_file }
  w.start    = "cd #{rails_root} && #{bundle_command} exec #{rake_command} environment resque:scheduler &"
  w.log      = "#{rails_root}/log/resque-scheduler.log"
  setup_watch w
end

# This will ride alongside god and kill any rogue stale worker
# processes. Their sacrifice is for the greater good.

WORKER_TIMEOUT = 3600 * 1 # 1 hour

Thread.new do
  loop do
    begin
      `ps -e -o pid,command | grep [r]esque`.split("\n").each do |line|
        parts   = line.split(' ')
        next if parts[-2] != "at"
        started = parts[-1].to_i
        elapsed = Time.now - Time.at(started)

        if elapsed >= WORKER_TIMEOUT
          ::Process.kill('TERM', parts[0].to_i)
        end
      end
    rescue
      # don't die because of stupid exceptions
      nil
    end

    sleep 30
  end
end

# Unicorn

God.watch do |w|

  # The name of the process.
  # You can then use it with god commands such as start/stop/restart.
  w.name = "unicorn"

  # Use the process group if you want to start/stop/restart multiple processes at once.
  w.group = "rails"

  w.uid = '<%= node[:app_config][:username] %>'
  w.gid = '<%= node[:app_config][:username] %>'

  # Environment variables to set before starting the process.
  w.env = { 'RAILS_ENV' => "<%= node[:app_config][:environment] %>" }

  # Where unicorn stores its PID file. God uses this to track the process.
  w.pid_file = "#{pid_dir}/unicorn.pid"

  # Start, stop and restart commands for the process.
  # Here, we use unicorn to start the app and send signals to stop and restart.
  w.start = "/bin/bash -c 'cd #{rails_root}; RAILS_ENV=<%= node[:app_config][:environment] %> /home/<%= node[:app_config][:username] %>/.rbenv/shims/bundle exec unicorn -c #{rails_root}/config/unicorn.rb -E <%= node[:app_config][:environment] %> -D'"
  w.stop = "kill -QUIT `cat #{w.pid_file}`"
  w.restart = "kill -USR2 `cat #{w.pid_file}`" # hot deploy
  w.log = "#{rails_root}/log/god.log"

  # Working directory where commands will be run.
  w.dir = rails_root

  # Clean stale PID files before starting.
  w.behavior :clean_pid_file

  # How often God will check the process.
  # All transitions defined below are checked at this frequency.
  w.interval = 30.seconds

  # Wait 15 seconds before checking if Unicorn has started or restarted successfully.
  w.start_grace = 15.seconds
  w.restart_grace = 15.seconds

  # Determine the state on startup.
  # When God starts, the watch is in the init state. This and all further transitions
  # are checked every interval to determine whether the state has changed.
  w.transition(:init, { true => :up, false => :start }) do |on|

    # Transition from the init state to the up state if the process is already running,
    # or to the start state if it's not.
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # Determine when the process has finished starting:
  w.transition([:start, :restart], :up) do |on|

    # Transition from the start or restart state
    # to the up state if the process is running.
    on.condition(:process_running) do |c|
      c.running = true
    end

    # Try checking the process 3 times then transition
    # to the start state again if it hasn't started.
    on.condition(:tries) do |c|
      c.times = 3
      c.transition = :start
    end

    # With the previous configuration, this will start checking whether the process
    # has started 15 seconds after running the start/restart command (start grace).
    # After the first check, it will try checking two more times over 60 seconds
    # (twice the interval), then transition to the  start state if the process
    # hasn't started.
  end

  # Start the process if it's not running.
  w.transition(:up, :start) do |on|

    # If the process isn't running, notify developers
    # and transition from the up to the start state.
    on.condition(:process_running) do |c|
      c.running = false
      c.notify = 'developers'
    end
  end

  # Restart if memory or cpu is too high.
  w.restart_if do |restart|

    restart.condition(:memory_usage) do |c|
      c.above = 150.megabytes
      c.times = [3, 5] # 3 out of 5 intervals
      c.notify = 'developers'
    end

    restart.condition(:cpu_usage) do |c|
      c.above = 50.percent
      c.times = 5
      c.notify = 'developers'
    end
  end

  # Safeguard against multiple restarts.
  w.lifecycle do |on|

    on.condition(:flapping) do |c|
      c.notify = 'developers'

      # If the process transitions to the start or restart state 5 times within
      # 30 minutes, notify developers and transition to the unmonitored state.
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 30.minutes
      c.transition = :unmonitored

      # Retry monitoring in 10 minutes.
      c.retry_in = 10.minutes

      # If flapping is detected 5 times within 10 hours, notify developers and
      # give up (the process will have to be restarted manually).
      c.retry_times = 5
      c.retry_within = 10.hours
    end
  end
end